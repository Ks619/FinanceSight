pipeline {
    agent any

    environment {
        PROJECT_ID = "financesight-463118"
        IMAGE_NAME = "fetch-crypto"
        IMAGE_TAG = "latest"
        IMAGE_URI = "gcr.io/${PROJECT_ID}/${IMAGE_NAME}:${IMAGE_TAG}"
    }

    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('services/fetch_crypto') {
                    script {
                        echo "Building Docker image: ${IMAGE_URI}"
                        sh "docker build -t ${IMAGE_URI} ."
                    }
                }
            }
        }

        stage('Authenticate with Google Cloud') {
            steps {
                withCredentials([file(credentialsId: 'GCP_KEY_FILE', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    script {
                        sh """
                        echo Authenticating with Google Cloud...
                        gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}
                        gcloud config set project ${PROJECT_ID}
                        gcloud auth configure-docker --quiet
                        """
                    }
                }
            }
        }

        stage('Push Docker Image to GCR') {
            steps {
                script {
                    echo "Pushing Docker image to Google Container Registry..."
                    sh "docker push ${IMAGE_URI}"
                }
            }
        }

        stage('Validate Kubernetes CronJob YAML (dry-run)') {
            steps {
                dir('services/fetch_crypto') {
                    script {
                        echo "Validating Kubernetes YAML using kubectl dry-run"
                        sh """
                        if command -v kubectl >/dev/null 2>&1; then
                          kubectl apply --dry-run=client -f fetch_crypto_cronjob.yaml
                        else
                          echo "Skipping dry-run: kubectl not available"
                        fi
                        """
                    }
                }
            }
        }

        stage('Delete from GCR & Local Docker') {
            steps {
                withCredentials([file(credentialsId: 'GCP_KEY_FILE', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    script {
                        sh """
                        echo Deleting Docker image locally...
                        docker rmi ${IMAGE_URI} || true

                        echo Deleting Docker image from GCR...
                        gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}
                        gcloud config set project ${PROJECT_ID}
                        gcloud artifacts docker images delete ${IMAGE_URI} --delete-tags --quiet || true
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up local Docker image"
            // Remove local image after the pipeline to save space
            sh "docker rmi ${IMAGE_URI} || true"
        }
        success {
            echo "Pipeline completed successfully"
        }
        failure {
            echo "Pipeline failed"
        }
    }
}
