pipeline {
    agent any

    environment {
        PROJECT_ID = "financesight-463118"
        IMAGE_NAME = "fetch-crypto"
        IMAGE_TAG = "latest"
        IMAGE_URI = "gcr.io/${PROJECT_ID}/${IMAGE_NAME}:${IMAGE_TAG}"
    }

    stages {

        stage('üì• Clone Repository') {
            steps {
                echo "üîÑ Checking out source code from Git"
                checkout scm
            }
        }

        stage('üê≥ Build Docker Image') {
            steps {
                dir('services/fetch_crypto') {
                    script {
                        echo "üî® Building Docker image: ${IMAGE_URI}"
                        sh "docker build -t ${IMAGE_URI} ."
                    }
                }
            }
        }

        stage('üîê Authenticate & Push to GCR') {
            steps {
                withCredentials([file(credentialsId: 'finsight-gcp-json-key', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    script {
                        echo "üîê Activating GCP service account"
                        sh "gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS"
                        sh "gcloud auth configure-docker"
                        echo "üì§ Pushing Docker image to GCR: ${IMAGE_URI}"
                        sh "docker push ${IMAGE_URI}"
                    }
                }
            }
        }

        stage('üß™ Dry-Run: Validate Kubernetes CronJob') {
            steps {
                dir('services/fetch_crypto') {
                    script {
                        echo "üß™ Validating fetch_crypto_cronjob.yaml with kubectl (dry run)"
                        sh "kubectl apply --dry-run=client -f fetch_crypto_cronjob.yaml"
                        echo "‚úÖ CronJob YAML is valid"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo "üßπ Cleaning up Docker image: ${IMAGE_URI}"
                sh "docker rmi ${IMAGE_URI} || true"
            }
        }
        success {
            echo '‚úÖ Pipeline completed successfully!'
        }
        failure {
            echo '‚ùå Pipeline failed!'
        }
    }
}
