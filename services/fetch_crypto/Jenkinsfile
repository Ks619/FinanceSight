pipeline {
    agent any

    environment {
        PROJECT_ID = "financesight-463118"
        REGION = "me-west1"
        REPO_NAME = "fetch-crypto"
        IMAGE_NAME = "fetch-crypto"
        IMAGE_URI = "${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/${IMAGE_NAME}:latest"
    }

    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
            }
        }

        stage('Authenticate with GCP') {
            steps {
                withCredentials([file(credentialsId: 'GCP_KEY_FILE', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    sh """
                        echo "Authenticating with GCP..."
                        gcloud auth activate-service-account --key-file=\$GOOGLE_APPLICATION_CREDENTIALS
                        gcloud config set project ${PROJECT_ID}
                        gcloud auth configure-docker ${REGION}-docker.pkg.dev --quiet
                    """
                }
            }
        }  

        stage('Build Docker Image') {
            steps {
                dir('services/fetch_crypto') {
                    script {
                        echo "Building Docker image: ${IMAGE_URI}"
                        sh "docker build -t ${IMAGE_URI} ."
                    }
                }
            }
        }

        stage('Push Docker Image to Artifact Registry') {
            steps {
                script {
                    echo "Pushing Docker image to Artifact Registry..."
                    sh "docker push ${IMAGE_URI}"
                }
            }
        }

        stage('Validate Kubernetes CronJob YAML (dry-run)') {
            steps {
                dir('services/fetch_crypto') {
                    script {
                        echo "Validating Kubernetes YAML locally (offline)"
                        sh '''
                        if command -v kubectl >/dev/null 2>&1; then
                        kubectl apply --dry-run=client --validate=false -f fetch_crypto_cronjob.yaml
                        else
                        echo "Skipping dry-run: kubectl not available"
                        fi
                        '''
                    }
                }
            }
        }


        stage('Delete from Artifact Registry & Local Docker') {
            steps {
                withCredentials([file(credentialsId: 'GCP_KEY_FILE', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    script {
                        sh """
                        echo "Deleting local Docker image..."
                        docker rmi ${IMAGE_URI} || true

                        echo "Deleting image from Artifact Registry..."
                        gcloud auth activate-service-account --key-file=\$GOOGLE_APPLICATION_CREDENTIALS
                        gcloud config set project ${PROJECT_ID}
                        gcloud artifacts docker images delete ${IMAGE_URI} --delete-tags --quiet || true
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "✅ Pipeline completed successfully"
        }
        failure {
            echo "❌ Pipeline failed"
        }
    }
}
